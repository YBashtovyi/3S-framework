// <auto-generated />
using System;
using App.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace App.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200915135736_v004.00_Initial")]
    partial class v00400_Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("App.Data.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_atu_city");

                    b.HasIndex("TypeId")
                        .HasName("ix_atu_city_type_id");

                    b.ToTable("atu_city");
                });

            modelBuilder.Entity("App.Data.Models.CityDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnName("code")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_atu_city_district");

                    b.ToTable("atu_city_district");
                });

            modelBuilder.Entity("App.Data.Models.Coordinate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cdn_coordinate");

                    b.ToTable("cdn_coordinate");
                });

            modelBuilder.Entity("App.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_atu_country");

                    b.ToTable("atu_country");
                });

            modelBuilder.Entity("App.Data.Models.CryptoSignFieldSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("field_name")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("SignFieldName")
                        .HasColumnName("sign_field_name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_sys_crypto_sign_field_setting");

                    b.HasAlternateKey("EntityName", "FieldName")
                        .HasName("ak_sys_crypto_sign_field_setting_entity_name_field_name");

                    b.ToTable("sys_crypto_sign_field_setting");
                });

            modelBuilder.Entity("App.Data.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnName("department_type_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_org_department");

                    b.HasIndex("DepartmentTypeId")
                        .HasName("ix_org_department_department_type_id");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_org_department_organization_id");

                    b.ToTable("org_department");
                });

            modelBuilder.Entity("App.Data.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepartmentSectionId")
                        .HasColumnName("department_section_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionTypeId")
                        .HasColumnName("position_type_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WorkingStartDate")
                        .HasColumnName("working_start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_org_employee");

                    b.HasIndex("DepartmentId")
                        .HasName("ix_org_employee_department_id");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_org_employee_organization_id");

                    b.HasIndex("PersonId")
                        .HasName("ix_org_employee_person_id");

                    b.HasIndex("PositionTypeId")
                        .HasName("ix_org_employee_position_type_id");

                    b.ToTable("org_employee");
                });

            modelBuilder.Entity("App.Data.Models.EntityExtendedPropertyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PropertyId")
                        .HasColumnName("property_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_cmn_entity_extended_property_value");

                    b.HasIndex("EntityId")
                        .HasName("ix_cmn_entity_extended_property_value_entity_id");

                    b.HasIndex("PropertyId")
                        .HasName("ix_cmn_entity_extended_property_value_property_id");

                    b.ToTable("cmn_entity_extended_property_value");
                });

            modelBuilder.Entity("App.Data.Models.EntityRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RelatedEntityId")
                        .HasColumnName("related_entity_id")
                        .HasColumnType("uuid");

                    b.Property<string>("RelatedEntityName")
                        .HasColumnName("related_entity_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RelationType")
                        .HasColumnName("relation_type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_cmn_entity_relation");

                    b.ToTable("cmn_entity_relation");
                });

            modelBuilder.Entity("App.Data.Models.EnumRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Group")
                        .HasColumnName("group")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("ItemNumber")
                        .HasColumnName("item_number")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_cmn_enum_record");

                    b.ToTable("cmn_enum_record");
                });

            modelBuilder.Entity("App.Data.Models.ExtendedProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PropertyTypeId")
                        .HasColumnName("property_type_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cmn_extended_property");

                    b.HasIndex("PropertyTypeId")
                        .HasName("ix_cmn_extended_property_property_type_id");

                    b.ToTable("cmn_extended_property");
                });

            modelBuilder.Entity("App.Data.Models.FileStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasColumnName("content_type")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<Guid?>("FileGroupId")
                        .HasColumnName("file_group_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<int>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("integer");

                    b.Property<int>("FileStoreDestinationType")
                        .HasColumnName("file_store_destination_type")
                        .HasColumnType("integer");

                    b.Property<string>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cmn_file_store");

                    b.HasIndex("DocumentTypeId")
                        .HasName("ix_cmn_file_store_document_type_id");

                    b.HasIndex("FileGroupId")
                        .HasName("ix_cmn_file_store_file_group_id");

                    b.ToTable("cmn_file_store");
                });

            modelBuilder.Entity("App.Data.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateInOneSignalDate")
                        .HasColumnName("create_in_one_signal_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Errored")
                        .HasColumnName("errored")
                        .HasColumnType("integer");

                    b.Property<int>("FailedMessages")
                        .HasColumnName("failed_messages")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("OneSignalId")
                        .HasColumnName("one_signal_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ParticularTime")
                        .HasColumnName("particular_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("StateId")
                        .HasColumnName("state_id")
                        .HasColumnType("uuid");

                    b.Property<int>("SuccessfulMessages")
                        .HasColumnName("successful_messages")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<Guid>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id")
                        .HasName("pk_cmn_notification");

                    b.HasIndex("OneSignalId")
                        .HasName("ix_cmn_notification_one_signal_id");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_cmn_notification_organization_id");

                    b.HasIndex("StateId")
                        .HasName("ix_cmn_notification_state_id");

                    b.HasIndex("TypeId")
                        .HasName("ix_cmn_notification_type_id");

                    b.ToTable("cmn_notification");
                });

            modelBuilder.Entity("App.Data.Models.NotificationReceiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NotificationId")
                        .HasColumnName("notification_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnName("receiver_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cmn_notification_receiver");

                    b.HasIndex("NotificationId")
                        .HasName("ix_cmn_notification_receiver_notification_id");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_cmn_notification_receiver_organization_id");

                    b.HasIndex("ReceiverId")
                        .HasName("ix_cmn_notification_receiver_receiver_id");

                    b.ToTable("cmn_notification_receiver");
                });

            modelBuilder.Entity("App.Data.Models.OrgUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DerivedEntity")
                        .HasColumnName("derived_entity")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OrgUnitType")
                        .HasColumnName("org_unit_type")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_org_unit");

                    b.ToTable("org_unit");
                });

            modelBuilder.Entity("App.Data.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("BaseEntity")
                        .HasColumnName("base_entity")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(400)")
                        .HasMaxLength(400);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_org_organization");

                    b.ToTable("org_organization");
                });

            modelBuilder.Entity("App.Data.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(129)")
                        .HasMaxLength(129);

                    b.Property<Guid?>("GenderId")
                        .HasColumnName("gender_id")
                        .HasColumnType("uuid");

                    b.Property<string>("IPN")
                        .HasColumnName("ipn")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("NoIPN")
                        .HasColumnName("no_ipn")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("text");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<bool>("SubscribedToNotifications")
                        .HasColumnName("subscribed_to_notifications")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_cmn_person");

                    b.HasIndex("GenderId")
                        .HasName("ix_cmn_person_gender_id");

                    b.HasIndex("OwnerId")
                        .HasName("ix_cmn_person_owner_id");

                    b.ToTable("cmn_person");
                });

            modelBuilder.Entity("App.Data.Models.PersonPopulationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PopulationCategoryId")
                        .HasColumnName("population_category_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cmn_person_population_category");

                    b.HasIndex("PersonId")
                        .HasName("ix_cmn_person_population_category_person_id");

                    b.HasIndex("PopulationCategoryId")
                        .HasName("ix_cmn_person_population_category_population_category_id");

                    b.ToTable("cmn_person_population_category");
                });

            modelBuilder.Entity("App.Data.Models.PostIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostIndexStr")
                        .HasColumnName("post_index_str")
                        .HasColumnType("text");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_atu_post_index");

                    b.ToTable("atu_post_index");
                });

            modelBuilder.Entity("App.Data.Models.PostOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Code")
                        .HasColumnName("code")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Contacts")
                        .HasColumnName("contacts")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsWorking")
                        .HasColumnName("is_working")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PostIndex")
                        .HasColumnName("post_index")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_atu_post_office");

                    b.ToTable("atu_post_office");
                });

            modelBuilder.Entity("App.Data.Models.PostOfficeByDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityDistrictId")
                        .HasColumnName("city_district_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PostOfficeId")
                        .HasColumnName("post_office_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_atu_post_office_by_district");

                    b.ToTable("atu_post_office_by_district");
                });

            modelBuilder.Entity("App.Data.Models.PrintedFormTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MainEntityName")
                        .HasColumnName("main_entity_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("Template")
                        .HasColumnName("template")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_cmn_printed_form_template");

                    b.ToTable("cmn_printed_form_template");
                });

            modelBuilder.Entity("App.Data.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("KOATUU")
                        .HasColumnName("koatuu")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_atu_region");

                    b.ToTable("atu_region");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_eq_schedule_resource");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_eq_schedule_resource_organization_id");

                    b.ToTable("eq_schedule_resource");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("BreakBetweenSlots")
                        .HasColumnName("break_between_slots")
                        .HasColumnType("interval");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Day1")
                        .HasColumnName("day1")
                        .HasColumnType("boolean");

                    b.Property<bool>("Day2")
                        .HasColumnName("day2")
                        .HasColumnType("boolean");

                    b.Property<bool>("Day3")
                        .HasColumnName("day3")
                        .HasColumnType("boolean");

                    b.Property<bool>("Day4")
                        .HasColumnName("day4")
                        .HasColumnType("boolean");

                    b.Property<bool>("Day5")
                        .HasColumnName("day5")
                        .HasColumnType("boolean");

                    b.Property<bool>("Day6")
                        .HasColumnName("day6")
                        .HasColumnType("boolean");

                    b.Property<bool>("Day7")
                        .HasColumnName("day7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullDay")
                        .HasColumnName("is_full_day")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResourceId")
                        .HasColumnName("resource_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScheduleRepeatId")
                        .HasColumnName("schedule_repeat_id")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("SlotDuration")
                        .HasColumnName("slot_duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("WorkDateFrom")
                        .HasColumnName("work_date_from")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("WorkDateTo")
                        .HasColumnName("work_date_to")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("WorkTimeFrom")
                        .HasColumnName("work_time_from")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkTimeTo")
                        .HasColumnName("work_time_to")
                        .HasColumnType("interval");

                    b.HasKey("Id")
                        .HasName("pk_eq_schedule_setting");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_eq_schedule_setting_organization_id");

                    b.HasIndex("ScheduleRepeatId")
                        .HasName("ix_eq_schedule_setting_schedule_repeat_id");

                    b.ToTable("eq_schedule_setting");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleSettingProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PropertyTypeId")
                        .HasColumnName("property_type_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("ScheduleSettingId")
                        .HasColumnName("schedule_setting_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_eq_schedule_setting_property");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_eq_schedule_setting_property_organization_id");

                    b.HasIndex("PropertyTypeId")
                        .HasName("ix_eq_schedule_setting_property_property_type_id");

                    b.ToTable("eq_schedule_setting_property");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScheduleSettingId")
                        .HasColumnName("schedule_setting_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SlotStateId")
                        .HasColumnName("slot_state_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SlotTypeId")
                        .HasColumnName("slot_type_id")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("TimeFrom")
                        .HasColumnName("time_from")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("TimeTo")
                        .HasColumnName("time_to")
                        .HasColumnType("interval");

                    b.HasKey("Id")
                        .HasName("pk_eq_schedule_slot");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_eq_schedule_slot_organization_id");

                    b.HasIndex("SlotStateId")
                        .HasName("ix_eq_schedule_slot_slot_state_id");

                    b.HasIndex("SlotTypeId")
                        .HasName("ix_eq_schedule_slot_slot_type_id");

                    b.ToTable("eq_schedule_slot");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("BreakBetweenSlots")
                        .HasColumnName("break_between_slots")
                        .HasColumnType("interval");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DayOfWeekId")
                        .HasColumnName("day_of_week_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsWeekend")
                        .HasColumnName("is_weekend")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnName("schedule_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ScheduleSettingId")
                        .HasColumnName("schedule_setting_id")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("WorkTimeDuration")
                        .HasColumnName("work_time_duration")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkTimeFrom")
                        .HasColumnName("work_time_from")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkTimeTo")
                        .HasColumnName("work_time_to")
                        .HasColumnType("interval");

                    b.HasKey("Id")
                        .HasName("pk_eq_schedule_time");

                    b.HasIndex("DayOfWeekId")
                        .HasName("ix_eq_schedule_time_day_of_week_id");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_eq_schedule_time_organization_id");

                    b.ToTable("eq_schedule_time");
                });

            modelBuilder.Entity("App.Data.Models.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_atu_street");

                    b.ToTable("atu_street");
                });

            modelBuilder.Entity("App.Data.Models.SysEvaluatedValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.Property<string>("ValueName")
                        .IsRequired()
                        .HasColumnName("value_name")
                        .HasColumnType("text");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnName("value_type")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_sys_evaluated_value");

                    b.HasIndex("EntityId", "EntityName", "ValueName")
                        .IsUnique()
                        .HasName("ix_sys_evaluated_value_entity_id_entity_name_value_name");

                    b.ToTable("sys_evaluated_value");
                });

            modelBuilder.Entity("Core.Data.ApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .HasColumnName("type_name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_sys_application_setting");

                    b.ToTable("sys_application_setting");
                });

            modelBuilder.Entity("Core.Models.AuditHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Entity")
                        .HasColumnName("entity")
                        .HasColumnType("text");

                    b.Property<string>("KeyValues")
                        .HasColumnName("key_values")
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .HasColumnName("new_values")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnName("old_values")
                        .HasColumnType("text");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sys_audit_history");

                    b.ToTable("sys_audit_history");
                });

            modelBuilder.Entity("Core.Models.NumberCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<int>("CounterType")
                        .HasColumnName("counter_type")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Pattern")
                        .HasColumnName("pattern")
                        .HasColumnType("integer");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_number_counter");

                    b.ToTable("number_counter");
                });

            modelBuilder.Entity("Core.Models.PendingChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("error_message")
                        .HasColumnType("text");

                    b.Property<bool>("IsError")
                        .HasColumnName("is_error")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Owner")
                        .HasColumnName("owner")
                        .HasColumnType("text");

                    b.Property<bool>("Processed")
                        .HasColumnName("processed")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cmn_pending_change");

                    b.ToTable("cmn_pending_change");
                });

            modelBuilder.Entity("Core.Security.Models.ApplicationRowLevelRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<string>("HierarchyFieldName")
                        .IsRequired()
                        .HasColumnName("hierarchy_field_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHierarchical")
                        .HasColumnName("is_hierarchical")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sys_application_row_level_right");

                    b.ToTable("sys_application_row_level_right");
                });

            modelBuilder.Entity("Core.Security.Models.FieldRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessLevel")
                        .HasColumnName("access_level")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("field_name")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RightId")
                        .HasColumnName("right_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_field_right");

                    b.HasIndex("RightId")
                        .HasName("ix_sys_field_right_right_id");

                    b.ToTable("sys_field_right");
                });

            modelBuilder.Entity("Core.Security.Models.OperationRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessLevel")
                        .HasColumnName("access_level")
                        .HasColumnType("integer");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasColumnName("operation_name")
                        .HasColumnType("text");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sys_operation_right");

                    b.ToTable("sys_operation_right");
                });

            modelBuilder.Entity("Core.Security.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_profile");

                    b.ToTable("sys_profile");
                });

            modelBuilder.Entity("Core.Security.Models.ProfileOperationRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OperationRightId")
                        .HasColumnName("operation_right_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sys_profile_operation_right");

                    b.HasIndex("OperationRightId")
                        .HasName("ix_sys_profile_operation_right_operation_right_id");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sys_profile_operation_right_profile_id");

                    b.ToTable("sys_profile_operation_right");
                });

            modelBuilder.Entity("Core.Security.Models.ProfileRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RightId")
                        .HasColumnName("right_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_profile_right");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sys_profile_right_profile_id");

                    b.HasIndex("RightId")
                        .HasName("ix_sys_profile_right_right_id");

                    b.ToTable("sys_profile_right");
                });

            modelBuilder.Entity("Core.Security.Models.ProfileRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_profile_role");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sys_profile_role_profile_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_sys_profile_role_role_id");

                    b.ToTable("sys_profile_role");
                });

            modelBuilder.Entity("Core.Security.Models.Right", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntityAccessLevel")
                        .HasColumnName("entity_access_level")
                        .HasColumnType("integer");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sys_right");

                    b.ToTable("sys_right");
                });

            modelBuilder.Entity("Core.Security.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sys_role");

                    b.ToTable("sys_role");
                });

            modelBuilder.Entity("Core.Security.Models.RoleOperationRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OperationRightId")
                        .HasColumnName("operation_right_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_role_operation_right");

                    b.HasIndex("OperationRightId")
                        .HasName("ix_sys_role_operation_right_operation_right_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_sys_role_operation_right_role_id");

                    b.ToTable("sys_role_operation_right");
                });

            modelBuilder.Entity("Core.Security.Models.RoleRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RightId")
                        .HasColumnName("right_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_role_right");

                    b.HasIndex("RightId")
                        .HasName("ix_sys_role_right_right_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_sys_role_right_role_id");

                    b.ToTable("sys_role_right");
                });

            modelBuilder.Entity("Core.Security.Models.RowLevelRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessType")
                        .HasColumnName("access_type")
                        .HasColumnType("integer");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<string>("MainEntityName")
                        .IsRequired()
                        .HasColumnName("main_entity_name")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sys_row_level_right");

                    b.HasAlternateKey("ProfileId", "EntityName", "MainEntityName")
                        .HasName("ak_sys_row_level_right_profile_id_entity_name_main_entity_name");

                    b.ToTable("sys_row_level_right");
                });

            modelBuilder.Entity("Core.Security.Models.RowLevelSecurityObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnName("entity_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("RowLevelRightId")
                        .HasColumnName("row_level_right_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_row_level_security_object");

                    b.HasIndex("RowLevelRightId")
                        .HasName("ix_sys_row_level_security_object_row_level_right_id");

                    b.ToTable("sys_row_level_security_object");
                });

            modelBuilder.Entity("Core.Security.Models.UserDefaultValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueId")
                        .HasColumnName("value_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_user_default_value");

                    b.HasAlternateKey("UserId", "EntityName")
                        .HasName("ak_sys_user_default_value_user_id_entity_name");

                    b.ToTable("sys_user_default_value");
                });

            modelBuilder.Entity("Core.Security.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnName("profile_id")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordState")
                        .HasColumnName("record_state")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_sys_user_profile");

                    b.HasIndex("ProfileId")
                        .HasName("ix_sys_user_profile_profile_id");

                    b.HasIndex("UserId")
                        .HasName("ix_sys_user_profile_user_id");

                    b.ToTable("sys_user_profile");
                });

            modelBuilder.Entity("App.Data.Models.City", b =>
                {
                    b.HasOne("App.Data.Models.EnumRecord", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_atu_city_cmn_enum_record_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.Department", b =>
                {
                    b.HasOne("App.Data.Models.EnumRecord", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .HasConstraintName("fk_org_department_cmn_enum_record_department_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_org_department_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.Employee", b =>
                {
                    b.HasOne("App.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_org_employee_org_department_department_id");

                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_org_employee_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_org_employee_cmn_person_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.EnumRecord", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionTypeId")
                        .HasConstraintName("fk_org_employee_cmn_enum_record_position_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.EntityExtendedPropertyValue", b =>
                {
                    b.HasOne("App.Data.Models.ExtendedProperty", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("fk_cmn_entity_extended_property_value_cmn_extended_property_prop~")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.ExtendedProperty", b =>
                {
                    b.HasOne("App.Data.Models.EnumRecord", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("fk_cmn_extended_property_cmn_enum_record_property_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.FileStore", b =>
                {
                    b.HasOne("App.Data.Models.EnumRecord", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("fk_cmn_file_store_cmn_enum_record_document_type_id");

                    b.HasOne("App.Data.Models.EnumRecord", "FileGroup")
                        .WithMany()
                        .HasForeignKey("FileGroupId")
                        .HasConstraintName("fk_cmn_file_store_cmn_enum_record_file_group_id");
                });

            modelBuilder.Entity("App.Data.Models.Notification", b =>
                {
                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_cmn_notification_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Models.EnumRecord", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .HasConstraintName("fk_cmn_notification_cmn_enum_record_state_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Models.EnumRecord", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_cmn_notification_cmn_enum_record_type_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.NotificationReceiver", b =>
                {
                    b.HasOne("App.Data.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("fk_cmn_notification_receiver_cmn_notification_notification_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_cmn_notification_receiver_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Data.Models.Employee", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("fk_cmn_notification_receiver_org_employee_receiver_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.Person", b =>
                {
                    b.HasOne("App.Data.Models.EnumRecord", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .HasConstraintName("fk_cmn_person_cmn_enum_record_gender_id");

                    b.HasOne("App.Data.Models.Organization", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_cmn_person_org_organization_owner_id");
                });

            modelBuilder.Entity("App.Data.Models.PersonPopulationCategory", b =>
                {
                    b.HasOne("App.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_cmn_person_population_category_cmn_person_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.EnumRecord", "PopulationCategory")
                        .WithMany()
                        .HasForeignKey("PopulationCategoryId")
                        .HasConstraintName("fk_cmn_person_population_category_cmn_enum_record_population_c~");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleResource", b =>
                {
                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_eq_schedule_resource_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.ScheduleSetting", b =>
                {
                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_eq_schedule_setting_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.EnumRecord", "ScheduleRepeat")
                        .WithMany()
                        .HasForeignKey("ScheduleRepeatId")
                        .HasConstraintName("fk_eq_schedule_setting_cmn_enum_record_schedule_repeat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Data.Models.ScheduleSettingProperty", b =>
                {
                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_eq_schedule_setting_property_org_organization_organization_~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.EnumRecord", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("fk_eq_schedule_setting_property_cmn_enum_record_property_type_~");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleSlot", b =>
                {
                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_eq_schedule_slot_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.EnumRecord", "SlotState")
                        .WithMany()
                        .HasForeignKey("SlotStateId")
                        .HasConstraintName("fk_eq_schedule_slot_cmn_enum_record_slot_state_id");

                    b.HasOne("App.Data.Models.EnumRecord", "SlotType")
                        .WithMany()
                        .HasForeignKey("SlotTypeId")
                        .HasConstraintName("fk_eq_schedule_slot_cmn_enum_record_slot_type_id");
                });

            modelBuilder.Entity("App.Data.Models.ScheduleTime", b =>
                {
                    b.HasOne("App.Data.Models.EnumRecord", "DayOfWeek")
                        .WithMany()
                        .HasForeignKey("DayOfWeekId")
                        .HasConstraintName("fk_eq_schedule_time_cmn_enum_record_day_of_week_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_eq_schedule_time_org_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.FieldRight", b =>
                {
                    b.HasOne("Core.Security.Models.Right", "Right")
                        .WithMany("FieldRights")
                        .HasForeignKey("RightId")
                        .HasConstraintName("fk_sys_field_right_sys_right_right_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.ProfileOperationRight", b =>
                {
                    b.HasOne("Core.Security.Models.OperationRight", "OperationRight")
                        .WithMany("Profiles")
                        .HasForeignKey("OperationRightId")
                        .HasConstraintName("fk_sys_profile_operation_right_sys_operation_right_operation_r~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Models.Profile", "Profile")
                        .WithMany("OperationRights")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sys_profile_operation_right_sys_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.ProfileRight", b =>
                {
                    b.HasOne("Core.Security.Models.Profile", "Profile")
                        .WithMany("Rights")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sys_profile_right_sys_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Models.Right", "Right")
                        .WithMany("Profiles")
                        .HasForeignKey("RightId")
                        .HasConstraintName("fk_sys_profile_right_sys_right_right_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.ProfileRole", b =>
                {
                    b.HasOne("Core.Security.Models.Profile", "Profile")
                        .WithMany("Roles")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sys_profile_role_sys_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Models.Role", "Role")
                        .WithMany("Profiles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_sys_profile_role_sys_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.RoleOperationRight", b =>
                {
                    b.HasOne("Core.Security.Models.OperationRight", "OperationRight")
                        .WithMany("Roles")
                        .HasForeignKey("OperationRightId")
                        .HasConstraintName("fk_sys_role_operation_right_sys_operation_right_operation_righ~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Models.Role", "Role")
                        .WithMany("OperationRights")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_sys_role_operation_right_sys_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.RoleRight", b =>
                {
                    b.HasOne("Core.Security.Models.Right", "Right")
                        .WithMany("Roles")
                        .HasForeignKey("RightId")
                        .HasConstraintName("fk_sys_role_right_sys_right_right_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Models.Role", "Role")
                        .WithMany("Rights")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_sys_role_right_sys_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.RowLevelRight", b =>
                {
                    b.HasOne("Core.Security.Models.Profile", null)
                        .WithMany("RowLevelRights")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sys_row_level_right_sys_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.RowLevelSecurityObject", b =>
                {
                    b.HasOne("Core.Security.Models.RowLevelRight", "RowLevelRight")
                        .WithMany("RowLevelSecurityObjects")
                        .HasForeignKey("RowLevelRightId")
                        .HasConstraintName("fk_sys_row_level_security_object_sys_row_level_right_row_level~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.UserDefaultValue", b =>
                {
                    b.HasOne("App.Data.Models.Employee", null)
                        .WithMany("DefaultValues")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sys_user_default_value_org_employee_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Models.UserProfile", b =>
                {
                    b.HasOne("Core.Security.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("fk_sys_user_profile_sys_profile_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Models.Employee", null)
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sys_user_profile_org_employee_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
