using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Core.Data;
using Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Core.Services
{
    public class AuditEntityEntryChangesTracker: IAuditEntityEntryChangesTracker
    {
        private static readonly string[] _notTrackedProperties = { "ModifiedOn" };

        public IEnumerable<AppAuditEntry> GetChanges(IEnumerable<EntityEntry> entityEntries, Guid authorId)
        {
            // because original collection may changed while IEnumerable<AppAuditEntry> exists
            var entries = entityEntries.ToArray();

            foreach (var entry in entries)
            {
                if (entry.State == EntityState.Detached || entry.State == EntityState.Unchanged
                    || entry.Entity is AuditHistory)
                {
                    continue;
                }

                var auditEntry = new AppAuditEntry(entry)
                {
                    Entity = entry.Metadata.ClrType.Name,
                    AuthorId = authorId
                };

                foreach (var property in entry.Properties)
                {
                    var propertyName = property.Metadata.Name;
                    if (_notTrackedProperties.Contains(propertyName))
                    {
                        continue;
                    }

                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified && property.OriginalValue != property.CurrentValue)
                            {
                                if (property.OriginalValue == null || !property.OriginalValue.Equals(property.CurrentValue))
                                {
                                    auditEntry.OldValues[propertyName] = property.OriginalValue;
                                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }

                if (auditEntry.HasModifications)
                {
                    yield return auditEntry;
                }
            }

        }
    }
}
